{
  "defmod": {
    "prefix": ["defmod"],
    "body": [
      "defmodule $1 do",
      "  @moduledoc \"\"\"",
      " \"\"\"",
      "",
      "  $2",
      "end"
    ],
    "description": "Module definition template"
  },
  "defdo": {
    "prefix": ["defdo"],
    "body": [
      "def $1 do",
      "  $2",
      "end"
    ],
    "description": "Function definition template"
  },
  "fnfn": {
    "prefix": ["fnfn"],
    "body": [
      "fn $1 -> $2 end"
    ],
    "description": "One line anonymous functions"
  },
  "testdo": {
    "prefix": ["testdo"],
    "body": [
      "test \"$1\", %{$2} do",
      "  $3",
      "end"
    ],
    "description": "Basic test with param"
  },
  "genserver": {
    "prefix": ["genserver"],
    "body": [
      "defmodule $1 do",
      "  use GenServer",
      "",
      "  # Server Callbacks",
      "",
      "  @impl true",
      "  def init(elements) do",
      "    initial_state = String.split(elements, \",\", trim: true)",
      "    {:ok, initial_state}",
      "  end",
      "",
      "  @impl true",
      "  def handle_call(:pop, _from, state) do",
      "    [to_caller | new_state] = state",
      "    {:reply, to_caller, new_state}",
      "  end",
      "",
      "  @impl true",
      "  def handle_cast({:push, element}, state) do",
      "    new_state = [element | state]",
      "    {:noreply, new_state}",
      "  end",
      "end"
    ]
  },
  "recurringgenserver": {
    "prefix": ["recurringgenserver"],
    "body": [
      "defmodule $1 do",
      "  use GenServer",
      "  ",
      "  def start_link(_) do",
      "    GenServer.start_link(__MODULE__, %{})",
      "  end",
      "",
      "  @impl true",
      "  def init(state) do",
      "    # Schedule work to be performed on start",
      "    schedule_work()",
      "",
      "    {:ok, state}",
      "  end",
      "",
      "  @impl true",
      "  def handle_info(:work, state) do",
      "    # Do the desired work here",
      "    # ...",
      "",
      "    # Reschedule once more",
      "    schedule_work()",
      "    ",
      "    {:noreply, state}",
      "  end",
      "",
      "  defp schedule_work do",
      "    # We schedule the work to happen in 2 hours (written in milliseconds).",
      "    # Alternatively, one might write :timer.hours(2)",
      "    Process.send_after(self(), :work, 2 * 60 * 60 * 1000)",
      "  end",
      "end"
    ]
  }
}
